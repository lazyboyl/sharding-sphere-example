mybatis:
  config-location: classpath:mybatis/mybatis-config.xml
  mapper-locations: classpath:mybatis/mapper/*.xml

pagehelper:
  helperDialect: mysql
  reasonable: true

server:
  port: 8798

snowflakeId:
  twepoch: 1606660865000

spring:
  shardingsphere:
    # 展示修改以后的sql语句
    props:
      sql-show: true
    datasource:
      common:
        driver-class-name: com.mysql.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource
      names: db0,db1
      db0:
        url: jdbc:mysql://127.0.0.1:3306/sharding-db0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2b8
        username: root
        password: '123456'
      db1:
        url: jdbc:mysql://127.0.0.1:3306/sharding-db1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2b8
        username: root
        password: '123456'
    rules:
      sharding:
        binding-tables[0]: t_order,t_order_item
        key-generators:
          # 此处必须要配置，否则会导致报错，因为shardingsphere-jdbc-core-spring-boot-starter需要加载此项配置，官网的demo例子有错
          snowflake:
            type: SNOWFLAKE
            props:
              worker-id: 123
        sharding-algorithms:
          order-item-inline:
            type: INLINE
            props:
              # 此处写法必须是t_order$->{order_id % 3}不能写为t_order${order_id % 3}，yml不认这种写法
              algorithm-expression: t_order_item$->{order_id % 3}
          # 规则名称必须使用-不能使用_，否则会导致无法解析，官网例子有错
          table-inline:
            type: INLINE
            props:
              # 此处写法必须是t_order$->{order_id % 3}不能写为t_order${order_id % 3}，yml不认这种写法
              algorithm-expression: t_order$->{order_id % 3}
          database-inline:
            type: INLINE
            props:
              algorithm-expression: db$->{order_id % 2}
        tables:
          t_order_item:
            # 配置t_order_item的分库分表的规则
            actual-data-nodes: db$->{0..1}.t_order_item$->{0..2}
            table-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: order-item-inline
              # 配置t_order_item的分库规则
            database-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: database-inline
          t_order:
            # 配置t_order的分库分表的规则
            actual-data-nodes: db$->{0..1}.t_order$->{0..2}
            table-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: table-inline
              # 配置t_order的分库规则
            database-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: database-inline
    enabled: true

